#!/usr/bin/env perl
use strict;
use warnings;
use Dancer qw/:syntax/;
use FindBin;
use Cwd qw/realpath/;
use Data::Dumper;
use lib "$FindBin::Bin/../lib";
use Dancer::Plugin::CouchDB;
use Biopay::Cardlock;

Dancer::Config::setting('appdir',realpath("$FindBin::Bin/.."));
Dancer::Config::load();

my $couch = couchdb() or die "Couldn't load couch!";
my $cardlock = Biopay::Cardlock->new(
    fetch_price_cb => \&fetch_fuel_price,
);;

print "Fetching recent transactions ...\n";
my $records = $cardlock->recent_transactions;
for my $txn (@$records) {
    my $id = $txn->{_id};

    autovivify_member($txn->{member_id});

    print "Saving $txn->{as_string} to the couch\n";
    eval { $couch->save_doc($txn)->recv };
    if ($@) {
	if ($@ =~ m/^409/) {
            #warn "Conflict detected for $id - skipping.\n";
	    next;
	}
	die "Failed to save $id to the couch: $@";
    }
}

exit;

sub fetch_fuel_price {
    my $doc = eval { $couch->open_doc("fuel_price")->recv };
    if ($@) {
	if ($@ =~ m/^404/) {
	    die "Could not load the fuel_price! Make sure it exists.";
	}
	else { die "Failed to load fuel_price: $@" };
    }
    return $doc->{price_per_litre} || die "No price per litre found!";
}

sub autovivify_member {
    my $member_id = shift;
    my $key = "member:$member_id";
    my $doc = eval { $couch->open_doc($key)->recv };
    if ($@) {
	$couch->save_doc({
		_id => $key,
		Type => 'member',
		member_id => $member_id,
	    }
	);
    }
}
