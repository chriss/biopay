#!/usr/bin/env perl
use 5.14.1;
use Dancer qw/:syntax/;
use FindBin;
use Cwd qw/realpath/;
use lib "$FindBin::Bin/../lib";
use Dancer::Plugin::CouchDB;
use Biopay::Cardlock;
use Biopay::Member;
use Biopay::Command;

Dancer::Config::setting('appdir',realpath("$FindBin::Bin/.."));
Dancer::Config::load();

my $couch = couchdb() or die "Couldn't load couch!";
my $cardlock = Biopay::Cardlock->new(
    fetch_price_cb => \&fetch_fuel_price,
);;

if (0) {
print "Fetching recent transactions ...\n";
my $records = $cardlock->recent_transactions;
for my $txn (@$records) {
    my $id = $txn->{_id};
    autovivify_member($txn->{member_id});
    print "Saving $txn->{as_string} to the couch\n";
    eval { $couch->save_doc($txn)->recv };
    if ($@) {
	next if $@ =~ m/^409/;
	die "Failed to save $id to the couch: $@";
    }
}
}
else {
    warn "Skipping cardlock txns";
}

print "Checking for jobs to run ...\n";
while (my $job = Biopay::Command->NextJob) {
    print "* Found job of type $job->{command} ...\n";
    my $member = $job->member;
    given ($job->{command}) {
        when ('freeze') {
            my $pin = $cardlock->fetch_PIN($member->id);
            $cardlock->set_PIN($member->id, 0);
            $member->PIN($pin);
            $member->save;
        }
        when ('unfreeze') {
            if ($member->PIN) {
                $cardlock->set_PIN($member->id, $member->PIN);
                $member->PIN(undef);
                $member->save;
            }
            else {
                warn "Cannot un-freeze account, no PIN stored for " . $member->id;
                # maybe send an email to the user?
            }
        }
        when ('change_PIN') {
            $cardlock->set_PIN($member->id, $job->args->{new_PIN});
        }
        default {
            die "Unknown command: '$job->{command}'";
        }
    }
    $couch->remove_doc($job);
}

exit;

sub fetch_fuel_price {
    my $doc = eval { $couch->open_doc("fuel_price")->recv };
    if ($@) {
	if ($@ =~ m/^404/) {
	    die "Could not load the fuel_price! Make sure it exists.";
	}
	else { die "Failed to load fuel_price: $@" };
    }
    return $doc->{price_per_litre} || die "No price per litre found!";
}

sub autovivify_member {
    my $member_id = shift;
    my $key = "member:$member_id";
    my $doc = eval { $couch->open_doc($key)->recv };
    if ($@) {
	$couch->save_doc({
		_id => $key,
		Type => 'member',
		member_id => $member_id,
	    }
	);
    }
}
