#!/home/bio/perl5/perlbrew/perls/perl-5.14.1/bin/perl
use 5.14.1;
use Dancer qw/:syntax/;
use FindBin;
use Cwd qw/realpath/;
use lib "$FindBin::Bin/../lib";
use Dancer::Plugin::CouchDB;
use Biopay::Cardlock;
use Biopay::Member;
use Biopay::Command;
use Biopay::Prices;
use AnyEvent;

Dancer::Config::setting('appdir',realpath("$FindBin::Bin/.."));
Dancer::Config::load();

my $couch = couchdb() or die "Couldn't load couch!";
warn "Loading latest fuel price ...\n";
my $price = 0; # will load it right away below
my $cardlock = Biopay::Cardlock->new(
    fetch_price_cb => sub { $price },
);

# Desired behaviour for the cardlock connector
# * Check the pump every 10s
# * Check the couch for jobs every 1 minute
# * Check for updated prices every 10 minutes

my $w = AnyEvent->condvar;
my $cardlock_timer = AnyEvent->timer(
    after => 0.5, interval => 10,
    cb    => \&check_cardlock,
);
my $job_timer = AnyEvent->timer(
    after => 1.0, interval => 60,
    cb    => \&check_for_jobs,
);
my $price_timer = AnyEvent->timer(
    after => 0.001, interval => 600,
    cb    => sub {
        Biopay::Prices->new->fuel_price(
            sub {
                $price = shift;
                warn "Latest fuel price: $price\n";
            },
        );
    },
);

$w->recv;

exit;

sub check_cardlock {
    print "Fetching recent transactions ...\n";
    my $records = $cardlock->recent_transactions;
    for my $txn (@$records) {
        my $id = $txn->{_id};
        autovivify_member($txn->{member_id});
        print "Saving $txn->{as_string} to the couch\n";
        $couch->save_doc($txn)->cb(
            sub {
                my $cv = shift;
                eval { $cv->recv };
                if ($@) {
                    return if $@ =~ m/^409/;
                    warn "Failed to save $id to the couch: $@";
                }
                else {
                    warn "Saved transaction $txn->{as_string}\n";
                }
            }
        );
    }
}

sub check_for_jobs {
    print "Checking for jobs to run ...\n";
    Biopay::Command->Run_jobs( \&handle_job );
}

sub handle_job {
    my $job = shift;
    print "* Found job of type $job->{command} ...\n";
    my $member_id = $job->args->{member_id};
    return undef unless $member_id;
    Biopay::Member->By_id($member_id, sub {
        my $member = shift;
        my $mid = $member->id;
        given ($job->{command}) {
            when ('freeze') {
                my $pin = $cardlock->fetch_PIN($mid);
                $cardlock->set_PIN($mid, 0);
                $member->PIN($pin);
                $member->save(sub {
                    warn "Saved " . $member->id . " to the couch";
                });
                debug "Froze account of member $mid";
            }
            when ('unfreeze') {
                if ($member->PIN) {
                    $cardlock->set_PIN($mid, $member->PIN);
                    $member->PIN(undef);
                    $member->save(sub {
                        warn "Saved " . $member->id . " to the couch";
                    });
                    debug "Restored frozen account of member $mid";
                }
                else {
                    debug "Cannot un-freeze account, no PIN stored for $mid";
                }
            }
            when ('change_PIN') {
                $cardlock->set_PIN($mid, $job->args->{new_PIN});
                debug "Changed PIN for $mid";
            }
            default {
                die "Unknown command: '$job->{command}'";
            }
        }
        $couch->remove_doc($job)->cb(
            sub {
                my $cv = shift;
                $cv->recv;
                warn "Removed job " . $job->_id . " from the couch";
            }
        );
        }
    );
}

sub autovivify_member {
    my $member_id = shift;
    my $member = Biopay::Member->Create(
        member_id => $member_id,
        success_cb => sub {
            warn "Saved member $member_id in the couch\n";
        },
        error_cb => sub {
            warn ".. Found member $member_id in the couch already\n";
        },
    );
}
